/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaces;

import Classes.Util;
import EDD.GraphP;
import java.util.Scanner;
import javax.swing.JOptionPane;

/**
 *
 * @author Mafer
 */
public class MainScreen extends javax.swing.JFrame {
    //Atributos de la clase
    private static GraphP graph;
    private static String filePath;
    
    /**
     * Constructor 1 de la clase MainScreen
     * inicia el sistema con un grafo nuevo
     */
    public MainScreen() {
        initComponents();
        this.graph = new GraphP();
        this.filePath = "";
        setLocationRelativeTo(null);
    }
    
    /**
     * Constructor 2 de la clase MainScreen
     * Inicia el sistema con un grafo precargado
     * @param graph grafo
     * @param filePath ruta del archivo
     */
    public MainScreen(GraphP graph, String filePath) {
        initComponents();
        this.graph = graph;
        this.filePath = filePath;
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToggleButton1 = new javax.swing.JToggleButton();
        background = new javax.swing.JPanel();
        startSimulation = new javax.swing.JButton();
        print = new javax.swing.JButton();
        save = new javax.swing.JButton();
        loadGraph = new javax.swing.JButton();
        addCity = new javax.swing.JButton();
        removeCity = new javax.swing.JButton();
        addEdge = new javax.swing.JButton();
        removeEdge = new javax.swing.JButton();

        jToggleButton1.setText("jToggleButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        background.setBackground(new java.awt.Color(227, 235, 248));
        background.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        startSimulation.setBackground(new java.awt.Color(153, 199, 231));
        startSimulation.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        startSimulation.setForeground(new java.awt.Color(255, 255, 255));
        startSimulation.setText("Iniciar simulacion");
        startSimulation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startSimulationActionPerformed(evt);
            }
        });
        background.add(startSimulation, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 30, 410, 50));

        print.setBackground(java.awt.SystemColor.activeCaption);
        print.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        print.setForeground(new java.awt.Color(255, 255, 255));
        print.setText("Ver grafo");
        print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printActionPerformed(evt);
            }
        });
        background.add(print, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 110, 170, 40));

        save.setBackground(java.awt.SystemColor.activeCaption);
        save.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        save.setForeground(new java.awt.Color(255, 255, 255));
        save.setText("Guardar grafo");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        background.add(save, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 170, 170, 40));

        loadGraph.setBackground(java.awt.SystemColor.activeCaption);
        loadGraph.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        loadGraph.setForeground(new java.awt.Color(255, 255, 255));
        loadGraph.setText("Cargar grafo");
        loadGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadGraphActionPerformed(evt);
            }
        });
        background.add(loadGraph, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 230, 170, 40));

        addCity.setBackground(java.awt.SystemColor.activeCaption);
        addCity.setForeground(new java.awt.Color(255, 255, 255));
        addCity.setText("Agregar ciudad");
        addCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCityActionPerformed(evt);
            }
        });
        background.add(addCity, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 110, 180, 30));

        removeCity.setBackground(java.awt.SystemColor.activeCaption);
        removeCity.setForeground(new java.awt.Color(255, 255, 255));
        removeCity.setText("Eliminar ciudad");
        removeCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeCityActionPerformed(evt);
            }
        });
        background.add(removeCity, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 150, 180, 30));

        addEdge.setBackground(java.awt.SystemColor.activeCaption);
        addEdge.setForeground(new java.awt.Color(255, 255, 255));
        addEdge.setText("Agregar relacion");
        addEdge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEdgeActionPerformed(evt);
            }
        });
        background.add(addEdge, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 200, 180, 30));

        removeEdge.setBackground(java.awt.SystemColor.activeCaption);
        removeEdge.setForeground(new java.awt.Color(255, 255, 255));
        removeEdge.setText("Eliminar relacion");
        removeEdge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeEdgeActionPerformed(evt);
            }
        });
        background.add(removeEdge, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 240, 180, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(background, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //Metodo para guardar el grafo en el filePath
    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        if(filePath.isBlank()){
            filePath = Util.filePath();
        }
        Util.save(graph, filePath);
    }//GEN-LAST:event_saveActionPerformed
    
    //Metodo para agregar un vertice al grafo
    private void addCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCityActionPerformed
        if(graph.getSize() >= 20){
            JOptionPane.showMessageDialog(null, "Error: se puede agregar un maximo de 20 ciudades");
        }
        else{
            AddCity ac = new AddCity(graph, filePath);
            ac.setVisible(true);
            this.dispose();            
        }
        
    }//GEN-LAST:event_addCityActionPerformed
    
    //Metodo para imprimir el grafo
    private void printActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printActionPerformed
        graph.print();   
    }//GEN-LAST:event_printActionPerformed
    
    //Metodo para eliminar un vertice del grafo
    private void removeCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeCityActionPerformed
        // TODO add your handling code here:
        if(graph.isEmpty()){
            JOptionPane.showMessageDialog(null, "Error: no hay ciudades en el grafo");
        }
        else{
            RemoveCity rc = new RemoveCity(graph, filePath);
            rc.setVisible(true);
            this.dispose();            
        }
    }//GEN-LAST:event_removeCityActionPerformed
    
    //Metodo para iniciar la simulacion 
    private void startSimulationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startSimulationActionPerformed
        // TODO add your handling code here:
        if(graph.allConected()){
            if(graph.getSize() < 4){
                JOptionPane.showMessageDialog(null, "Error: es necesario un minimo de 4 ciudades para iniciar la simulacion");
            }
            else{
                StartSimulation ss = new StartSimulation(graph, filePath);
                this.dispose();
                ss.setVisible(true);           
            }            
        }
        else{
            JOptionPane.showMessageDialog(null, "Error: no pueden quedar ciudades desconectadas");
        }
    }//GEN-LAST:event_startSimulationActionPerformed
    
    //Metodo para agregar una relacion al grafo
    private void addEdgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEdgeActionPerformed
        // TODO add your handling code here:
        EditEdge ae = new EditEdge(graph, filePath, EditEdge.ADD_OPTION);
        ae.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_addEdgeActionPerformed
    
    //Metodo para eliminar una relacion del grafo
    private void removeEdgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeEdgeActionPerformed
        // TODO add your handling code here:
        EditEdge ae = new EditEdge(graph, filePath, EditEdge.REMOVE_OPTION);
        ae.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_removeEdgeActionPerformed
    
    //Metodo para cargar un grafo
    private void loadGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadGraphActionPerformed
        // TODO add your handling code here:
        filePath = Util.filePath();
        if(Util.load(filePath) != null){
            graph = Util.load(filePath);
            JOptionPane.showMessageDialog(null, "Se cargo el grafo exitosamente");
        }
        else{
            JOptionPane.showMessageDialog(null, "Error: no se ha seleccionado el archivo correcto");
        }
    }//GEN-LAST:event_loadGraphActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainScreen(graph, filePath).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCity;
    private javax.swing.JButton addEdge;
    private javax.swing.JPanel background;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JButton loadGraph;
    private javax.swing.JButton print;
    private javax.swing.JButton removeCity;
    private javax.swing.JButton removeEdge;
    private javax.swing.JButton save;
    private javax.swing.JButton startSimulation;
    // End of variables declaration//GEN-END:variables
}
